<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>width = 100
ygap = 20
Levels.roomindex = 2
jump = 5
x = 32
y = 64
i=  0
RectangleX = 0
RectangleY = 0
boxbuf = 8
global.custom = true
SelLastX = x
SelLastY = y
grid_mousex = min(max(floor(mouse_x/16)*16,0),room_width-16)
grid_mousey = min(max(floor(mouse_y/16)*16,0),room_height-16)
selectedobject = -1
ResetX = 48
ResetY = 416
play = false
ChooseBallPos = false
RectangleX = 14*5+jump
pos1 = 16*3
pos2 = room_width-16*3 - RectangleX
Xstart = pos1
moving = false
YStart = y
grid = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grid_mousex = min(max(floor(mouse_x/16)*16,0),room_width-16)
grid_mousey = min(max(floor(mouse_y/16)*16,0),room_height-16)

if ChooseBallPos = true
{
    if mouse_check_button_pressed(mb_left)
    {
        if instance_place(grid_mousex-16,grid_mousey-16,custom_par) = noone
        and instance_place(grid_mousex-16,grid_mousey,custom_par) = noone
        and instance_place(grid_mousex,grid_mousey-16,custom_par) = noone
        and instance_place(grid_mousex,grid_mousey,custom_par) = noone
        {
            ResetX = grid_mousex
            ResetY = grid_mousey
            ChooseBallPos = false
        }
        
    }

    if mouse_check_button_pressed(mb_right)
        ChooseBallPos = false
}

if keyboard_check_pressed(vk_alt)
{
    if grid = true
        grid = false
    else
        grid = true
}
//move menu

/*if moving = true
{
    StartX = mouse_x 
    y = mouse_y
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>boxs</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(custom_par)
{
    if selected = true
    {
        if keyboard_check(vk_control)
        {
            tempx = min(obj_custom.grid_mousex,x)
            tempy = min(obj_custom.grid_mousey,y)
            repeat(ySize)
            {
                tempx = min(obj_custom.grid_mousex,x)
                repeat(xSize)
                {
                    draw_sprite(sprite_index,image_index,tempx,tempy)
                    tempx += 16
                }
                tempy += 16
            }
        }
    }
}

//current spawn position
draw_set_color(c_red)
draw_circle(ResetX,ResetY,7,false)
draw_sprite(spr_ball,0,ResetX,ResetY)

if ChooseBallPos = true 
{
    draw_set_color(c_red)
    draw_circle(grid_mousex,grid_mousey,7,false)
    draw_sprite(spr_ball,0,grid_mousex,grid_mousey)
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grid</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if grid = true
{
    draw_set_color(c_white)
    draw_set_alpha(0.4)
    tempi = 0
    repeat(2)
    {
        xx = 0
        repeat(room_width/BLOCKSIZE)
        {
            draw_line(xx*BLOCKSIZE+tempi,0,xx*BLOCKSIZE+tempi,room_height)
            xx += 1
        }
        xx = 0
        repeat(room_height/BLOCKSIZE)
        {   
            draw_line(0,xx*BLOCKSIZE+tempi,room_width,xx*BLOCKSIZE+tempi)
            xx += 1
        }
        tempi = 1
        draw_set_color(c_black)
    }
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  
    x = Xstart 
draw_set_color(c_white)
draw_set_alpha(0.7+max(0,(boxbuf-10)/5))
draw_rectangle(x-boxbuf,y-boxbuf,x+RectangleX+boxbuf,i+ygap+boxbuf,true)
draw_set_color(c_black)
draw_set_alpha(0.3+max(0,(boxbuf-10)/2))
draw_rectangle(x-boxbuf,y-boxbuf,x+RectangleX+boxbuf,i+ygap+boxbuf,false)
draw_set_alpha(0.7+max(0,(boxbuf-10)/5))

if MouseInBox(x-boxbuf,y-boxbuf,x+RectangleX+boxbuf,i+boxbuf)
{
    if boxbuf &lt; 8
        boxbuf += 0.5
    draw_set_alpha(1)
}
else if boxbuf &gt; 6
        boxbuf -= 0.5

draw_set_font(Tahoma_R_14)
    i = YStart

/*if MouseInBox(x-boxbuf,y-boxbuf,x+RectangleX+boxbuf,i+boxbuf) and mouse_check_button(mb_left)
    moving = true
else
    moving = false*/

draw_set_alpha(0.2)
if MouseInBox(x,i,x+RectangleX,i+BLOCKSIZE)
{
    draw_set_alpha(0.5)
    if mouse_check_button_pressed(mb_left)
    {
        if Xstart = pos1
            Xstart = pos2
        else
            Xstart = pos1
    }
}
draw_rectangle(x,i,x+RectangleX,i+BLOCKSIZE,false)
draw_set_alpha(1)
if Xstart = pos1
    draw_text_shadow(x+jump,i,"&gt;&gt;&gt;",c_white,c_black,1)  
else
    draw_text_shadow(x+jump,i,"&lt;&lt;&lt;",c_white,c_black,1)

i += ygap
        
if MouseInBox(x,i,x+width,i+BLOCKSIZE)
{
    draw_text_shadow(x+jump,i,"Play: " + string(OnOff(play)),c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        if play = true
        {
            play = false
            with(obj_ball)
                {restart_custom()}
        }
        else
            play = true
    }
}
else
    draw_text_shadow(x,i,"Play: " + string(OnOff(play)),c_white,c_black,1) 
    

if play = false
{
i += ygap
//Ball
if MouseInBox(x,i,x+BLOCKSIZE,i+BLOCKSIZE) and play = false
{
    draw_set_color(c_red)
    draw_circle(x+jump+BLOCKSIZE/2,i+BLOCKSIZE/2,7,false)
    draw_sprite(spr_ball,0,x+jump+BLOCKSIZE/2,i+BLOCKSIZE/2)
    if mouse_check_button_pressed(mb_left)
    {
        if ChooseBallPos = true
        {
            ChooseBallPos = false
            selectedobject = -1
        }
        else
        {
            ChooseBallPos = true
            selectedobject = obj_ball
        }
    }
}
else
{
    draw_set_color(c_red)
    draw_circle(x+BLOCKSIZE/2,i+BLOCKSIZE/2,7,false)
    draw_sprite(spr_ball,0,x+BLOCKSIZE/2,i+BLOCKSIZE/2)
}
    
Block_button(obj_dirt,spr_dirt,0,1,0,0)
Block_button(obj_wood,spr_wood,0,1,0,0)
Block_button(obj_rock,spr_rock,0,1,0,0)
Block_button(obj_sand,spr_sand,0,1,0,0)
Block_button(obj_creat,spr_creat,0,1,0,0)
Block_button(obj_solid,spr_wall,0,1,0,0)
Block_button(obj_cog,spr_cog,0,0.2,8,8)
Block_button(obj_cog_right,spr_cog_right,0,0.2,8,8)
Block_button(obj_tramp,spr_tramp,0,1,0,0)
Block_button(obj_magnet_north,spr_magnet_north,0,1,0,0)
Block_button(obj_magnet_south,spr_magnet_south,0,1,0,0)
Block_button(obj_sheild,spr_sheild,1,0.5,0,0)
Block_button(obj_sheild_clear,spr_sheild,0,0.5,0,0)

    
}
    
//save
i += ygap
if MouseInBox(x,i,x+width,i+15)
{
    draw_text_shadow(x+jump,i,"Save",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
        SaveLevel()
}
else
    draw_text_shadow(x,i,"Save",c_white,c_black,1) 
    
//exit
i += ygap
if MouseInBox(x,i,x+width,i+15)
{
    draw_text_shadow(x+jump,i,"Exit",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
        go_to_menu()
}
else
    draw_text_shadow(x,i,"Exit",c_white,c_black,1) 
    


RectangleY = i
    draw_set_alpha(1)

     
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsShapePoints/>
</object>
