<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
stages = 9
width = 100
ygap = 20
Levels.roomindex = 0
jump = 5
x = 32
y = 64
i=  0
RectangleX = 0
RectangleY = 0
boxbuf = 8
global.custom = false
global.load = false

backgroundAlpha = 1
regenAngle = 0

menu = "main"
hidden = false

selected = 0

menuItemHeightDefualt = 40;
menuItemHeightiOS = menuItemHeightDefualt;
menuItemHeight = menuItemHeightDefualt;
menuGapDefault = 20
menuGapiOS = menuGapDefault + 20
menuGap = menuGapDefault;

menuItemY[0] = room_height/2 - (menuGap*2.5 + 3*menuItemHeight)
menuItemY[1] = room_height/2 - (menuGap*1.5 + 2*menuItemHeight)
menuItemY[2] = room_height/2 - (menuGap*0.5 + 1*menuItemHeight)
menuItemY[3] = room_height/2 + (menuGap*0.5 + 0*menuItemHeight)
menuItemY[4] = room_height/2 + (menuGap*1.5 + 1*menuItemHeight)
menuItemY[5] = room_height/2 + (menuGap*2.5 + 2*menuItemHeight)

menuItem[0] = ''
menuItem[1] = STRPLAY
menuItem[2] = STRSTAGES
menuItem[3] = STROPTIONS
menuItem[4] = STREXIT
menuItem[5] = ''

stageDisplayed = 0

mouse_lastx = mouse_x
mouse_lasty = mouse_y

//menu scroll bar for stages
menuLength = (menuItemY[0]-menuGap/2 - menuItemY[3]+menuItemHeight+menuGap/2)/(stages/2)
scrolVisiblity = 0.3
highlightScroll = false
minScrollY = menuItemY[0]
maxScrollY = menuItemY[0] + (menuItemHeight*2+menuGap)*2
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key constants</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DOWNKEY1 = vk_down; DOWNKEY2 = ord('S'); DOWNKEY3 = vk_right; DOWNKEY4 = ord('D');
UPKEY1 = vk_up; UPKEY2 = ord('W'); UPKEY3 = vk_left; UPKEY4 = ord('A');
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.platform = iOS
{
    if menuGap != menuGapiOS
    {
        menuGap = menuGapiOS
        menuItemHeight = menuItemHeightiOS
             
        menuItemY[0] = room_height/2 - (menuGap*2.5 + 3*menuItemHeight)
        menuItemY[1] = room_height/2 - (menuGap*1.5 + 2*menuItemHeight)
        menuItemY[2] = room_height/2 - (menuGap*0.5 + 1*menuItemHeight)
        menuItemY[3] = room_height/2 + (menuGap*0.5 + 0*menuItemHeight)
        menuItemY[4] = room_height/2 + (menuGap*1.5 + 1*menuItemHeight)
        menuItemY[5] = room_height/2 + (menuGap*2.5 + 2*menuItemHeight)
    }
}
else
{

    if menuGap = menuGapiOS
    {
        menuGap = menuGapDefault
        menuItemHeight = menuItemHeightDefualt
             
        menuItemY[0] = room_height/2 - (menuGap*2.5 + 3*menuItemHeight)
        menuItemY[1] = room_height/2 - (menuGap*1.5 + 2*menuItemHeight)
        menuItemY[2] = room_height/2 - (menuGap*0.5 + 1*menuItemHeight)
        menuItemY[3] = room_height/2 + (menuGap*0.5 + 0*menuItemHeight)
        menuItemY[4] = room_height/2 + (menuGap*1.5 + 1*menuItemHeight)
        menuItemY[5] = room_height/2 + (menuGap*2.5 + 2*menuItemHeight)
    }
}

if global.debuggin = true
{
     if keyboard_check(ord('G'))
     {
        if mouse_wheel_up()
            menuGapiOS+=1
        
        if mouse_wheel_down()
            menuGapiOS-=1
    }     
    else if keyboard_check(ord('H'))
     {
        if mouse_wheel_up()
            menuItemHeightiOS+=1
        
        if mouse_wheel_down()
            menuItemHeightiOS-=1
    }       
}


//change selected
if keyboard_check_pressed(UPKEY1) or keyboard_check_pressed(UPKEY2) or keyboard_check_pressed(UPKEY3) or keyboard_check_pressed(UPKEY4)
{
    selected = (selected-1) mod 4
    if selected &lt; 0
       selected += 4
}
if keyboard_check_pressed(DOWNKEY1) or keyboard_check_pressed(DOWNKEY2) or keyboard_check_pressed(DOWNKEY3) or keyboard_check_pressed(DOWNKEY4)
{
    selected = (selected+1) mod 4
}

////////////////////////////////////////////////////////////////////////
//scroll menu
////////////////////////////////////////////////////////////////////////
if menu = "stages"
{
    if mouse_wheel_down()
    {
        stageDisplayed = (stageDisplayed + 1) mod stages
        menuItem[0] = STRSTAGE + " " + string(stageDisplayed+1)
        menuItem[1] = STRSTAGE + " " + string((stageDisplayed+1) mod stages+1)
        menuItem[2] = STRSTAGE + " " + string((stageDisplayed+2) mod stages+1)
        menuItem[3] = STRSTAGE + " " + string((stageDisplayed+3) mod stages+1)
        menuItem[4] = STRSTAGE + " " + string((stageDisplayed+4) mod stages+1)
        highlightScroll = true
    }
    else if mouse_wheel_up()
    {
        stageDisplayed = (stageDisplayed - 1+stages*2) mod stages
        if stageDisplayed &lt;= 0
           stageDisplayed -= stages
        menuItem[0] = STRSTAGE + " " + string((stageDisplayed+stages*2) mod stages+1)
        menuItem[1] = STRSTAGE + " " + string((stageDisplayed+stages*2+1) mod stages+1)
        menuItem[2] = STRSTAGE + " " + string((stageDisplayed+stages*2+2) mod stages+1)
        menuItem[3] = STRSTAGE + " " + string((stageDisplayed+stages*2+3) mod stages+1)
        menuItem[4] = STRSTAGE + " " + string((stageDisplayed+stages*2+4) mod stages+1)
        highlightScroll = true
    }
    
    //mouse over
    if MouseInBox(room_width/2+width,menuItemY[0]-menuGap/2,room_width/2+width+10+20,menuItemY[3]+menuItemHeight)
    {
        //click
        if mouse_check_button(mb_left)
        {
            if (mouse_y - menuItemY[0]) &gt; 0
               stageDisplayed = floor((((mouse_y - menuItemY[0])*2) / ((menuItemHeight*2+menuGap/2)) mod (stages - 4)))
            else
                stageDisplayed = 0
                
            menuItem[0] = STRSTAGE + " " + string((stageDisplayed+stages*2) mod stages+1)
            menuItem[1] = STRSTAGE + " " + string((stageDisplayed+stages*2+1) mod stages+1)
            menuItem[2] = STRSTAGE + " " + string((stageDisplayed+stages*2+2) mod stages+1)
            menuItem[3] = STRSTAGE + " " + string((stageDisplayed+stages*2+3) mod stages+1)
            menuItem[4] = STRSTAGE + " " + string((stageDisplayed+stages*2+4) mod stages+1)
        }
        highlightScroll = true
        
    }
    
    //highlight 
    if highlightScroll = true
    {
       scrolVisiblity += 0.05
       if scrolVisiblity &gt;= 0.3
       {
          scrolVisiblity = 0.3
          highlightScroll = false
       }
    }
    
    //modulate
    while(stageDisplayed &lt; 0)
         stageDisplayed = stageDisplayed mod stages
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if room != MENUROOM
   instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


//background
draw_background_ext(bg_menu,0,0,10,10,0,false,0.7*backgroundAlpha);
draw_set_color(c_black)
draw_set_alpha(0.2*backgroundAlpha)
draw_rectangle(0,0,room_width,room_height,false)
draw_set_alpha(1)
draw_set_color(c_white)


//hide/show
//mouse is over
if MouseInBox(64-48,2,64+48,18)
{
    draw_set_font(MenuFontSmallB)
    if mouse_check_button_pressed(mb_left)
    {
        if menu = "hidden"
        {
            menu = "main"
            menuItem[0] = STRPLAY
            menuItem[1] = STRSTAGES
            menuItem[2] = STROPTIONS
            menuItem[3] = STREXIT
        }
        else
            menu = "hidden"
    }
}
else
    draw_set_font(MenuFontSmall)
        
//drawing
//regerate 
if MouseInBox(64+64+16,0,64+64+16+16,16)
{
    regenAngle += 10
    if regenAngle &gt; 360
       regenAngle = regenAngle - 360
    if mouse_check_button_pressed(mb_left)
    {
        regenAngle = 359
        with(obj_ctrl){new_tip()}
        nextroom()   
    }
}
else if regenAngle &gt; 0
{
     regenAngle -= 40
     if regenAngle &lt; 0
        regenAngle = 0
}

   
draw_sprite_ext(spr_regen,1,64+64+16+8,8,0.5,0.5,-regenAngle,noone,1)
draw_sprite_ext(spr_regen,0,64+64+16+8,8,0.5,0.5,-regenAngle,noone,backgroundAlpha)

draw_set_halign(fa_center); 
if menu = "hidden"
{
    draw_text_shadow(64,2,"Show menu",c_white,c_black,1)
    if backgroundAlpha &gt; 0
       backgroundAlpha -= 0.1
}
else //not hidden
{
    if backgroundAlpha &lt; 1
       backgroundAlpha += 0.1
    draw_text_shadow(64,2,"Hide menu",c_white,c_black,1)
 
    //draw menu items
    _i = 0
    //four of them
    repeat(6)
    {
        if global.debuggin = true
        {
            draw_set_color(c_white)
            draw_rectangle(room_width/2-width,menuItemY[_i]-menuGap/2,room_width/2+width,menuItemY[_i]+menuItemHeight+menuGap/2,true)
        }
        //mouse is over
        if MouseInBox(room_width/2-width,menuItemY[_i]-menuGap/2,room_width/2+width,menuItemY[_i]+menuItemHeight+menuGap/2)
        {
            if global.debuggin = true
            {
                draw_set_color(c_red)
                draw_set_alpha(0.2)
                draw_rectangle(room_width/2-width,menuItemY[_i]-menuGap/2,room_width/2+width,menuItemY[_i]+menuItemHeight+menuGap/2,false)
                draw_set_alpha(1)
            }
            //mouse moved
            if mouse_lastx != mouse_x and mouse_lasty != mouse_y 
               //highlight 
               selected = _i
            //clicked 
            if mouse_check_button_pressed(mb_left)
            {
                menuButtonAction(menuItem[_i]);
            }
        }
        
        //draw menu item
        if selected = _i
           draw_set_font(MenuFontB) 
        else
            draw_set_font(MenuFont)
        draw_set_alpha(1)
        draw_text_shadow(room_width/2,menuItemY[_i],menuItem[_i],c_white,c_black,1)
        
        _i+=1;
    }

    //scroll bar for stages
    if menu = "stages"
    {
        draw_set_alpha(0.1+scrolVisiblity)
        draw_set_color(c_white)
        draw_rectangle(room_width/2+width+10,menuItemY[0]-menuGap/2,room_width/2+width+10+10,menuItemY[3]+menuItemHeight,true)
        draw_set_alpha(0.2+scrolVisiblity*2)
        //move
        if mouse_check_button(mb_left)
            menuPosition = max(minScrollY,min(mouse_y,maxScrollY))//menuItemY[0]+(menuItemHeight*2+menuGap)*(stageDisplayed)/2
        draw_rectangle(room_width/2+width+10,menuPosition-menuLength/2,room_width/2+width+10+10,menuPosition+menuLength/2,false)
        //fade
        if scrolVisiblity &gt; 0
           scrolVisiblity -= 0.007
    }
}
mouse_lastx = mouse_x
mouse_lasty = mouse_y

//debugging
if global.debuggin
{
    draw_text(16,room_height-64,"MenuHeight: " + string(menuItemHeight) + "  MenuGap: " + string(menuGap))
}

draw_set_font(Tahoma_R_14);
draw_set_halign(fa_left);  
    /*
_i += ygap
//Stage1
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Stage1",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        Levels.roomindex = 17
        with(obj_new_level)
            {instance_destroy()}
        room = stage_select1
    }
}
else
    draw_text_shadow(x,_i,"Stage1",c_white,c_black,1)
    
_i += ygap    
//Stage2
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Stage2",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        Levels.roomindex = 31
        with(obj_new_level)
            {instance_destroy()}
        room = stage_select2
    }
}
else
    draw_text_shadow(x,_i,"Stage2",c_white,c_black,1)
    
_i += ygap   
//Stage3
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Stage3",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        Levels.roomindex = 40
        with(obj_new_level)
            {instance_destroy()}
        room = stage_select3
    }
}
else
    draw_text_shadow(x,_i,"Stage3",c_white,c_black,1)
    
    
_i += ygap   
//Stage4
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Stage4",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        Levels.roomindex = 50
        with(obj_new_level)
            {instance_destroy()}
        room = stage_select4
    }
}
else
    draw_text_shadow(x,_i,"Stage4",c_white,c_black,1)
    
    
_i += ygap   
//Stage5
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Stage5",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        Levels.roomindex = 59
        with(obj_new_level)
            {instance_destroy()}
        room = stage_select5
    }
}
else
    draw_text_shadow(x,_i,"Stage5",c_white,c_black,1)
    
    
_i += ygap   
//Stage6
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Stage6",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        Levels.roomindex = 59
        with(obj_new_level)
            {instance_destroy()}
        room = stage_select6
    }
}
else
    draw_text_shadow(x,_i,"Stage6",c_white,c_black,1)
    
    
_i += ygap   
//Stage7
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Stage7",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        Levels.roomindex = 59
        with(obj_new_level)
            {instance_destroy()}
        room = stage_select7
    }
}
else
    draw_text_shadow(x,_i,"Stage7",c_white,c_black,1)
    
    
_i += ygap   
//Stage8
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Stage8",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        Levels.roomindex = 59
        with(obj_new_level)
            {instance_destroy()}
        room = stage_select8
    }
}
else
    draw_text_shadow(x,_i,"Stage8",c_white,c_black,1)    
    
    
_i += ygap   
//Stage9
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Stage9",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        Levels.roomindex = 59
        with(obj_new_level)
            {instance_destroy()}
        room = stage_select9
    }
}
else
    draw_text_shadow(x,_i,"Stage9",c_white,c_black,1)
    
    
_i += ygap   
//Stage custom
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Stage Custom",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        global.load = true
        Levels.roomindex = 59
        with(obj_new_level)
            {instance_destroy()}
        room = stage_selectCustom
    }
}
else
    draw_text_shadow(x,_i,"StageCustom",c_white,c_black,1)
   
     
_i += ygap*2  
//custome level
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Create Level",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        global.custom = true
        Levels.roomindex = 2
        with(obj_new_level)
            {instance_destroy()}
        room = rm_custom
        
    }
}
else
    draw_text_shadow(x,_i,"Create Level",c_white,c_black,1)     
     
_i += ygap*2  
//regenerate menu
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Regenerate Menu",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        with(obj_ctrl){new_tip()}
        nextroom()      
    }
}
else
    draw_text_shadow(x,_i,"Regenerate Menu",c_white,c_black,1)  
    
//x = tempx    
        
_i += ygap 
//voices option
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Voices: " + string(OnOff(global.voices)),c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        if global.voices = true
            global.voices = false
        else
            global.voices = true
    }
}
else
    draw_text_shadow(x,_i,"Voices: " + string(OnOff(global.voices)),c_white,c_black,1)  
    
//x = tempx    
//check for update
_i += ygap 

if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Check for Update",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
        execute_shell("http://brennanhatton.com/Bouncer.php","")
}
else
    draw_text_shadow(x,_i,"Check for Update",c_white,c_black,1) 
        
_i += ygap 

if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Exit",c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
        game_end()
}
else
    draw_text_shadow(x,_i,"Exit",c_white,c_black,1) 
    

RectangleX = 24*5+jump
RectangleY = _i
    draw_set_alpha(1)
    
        
//test mode
//play
//x = 400
/*_i = 400/*
if MouseInBox(x,_i,x+width,_i+15)
{
    draw_text_shadow(x+jump,_i,"Test mode: " + string(global.testmode),c_white,c_black,1)
    if mouse_check_button_pressed(mb_left)
    {
        if global.testmode = true
            global.testmode = false
        else
            global.testmode = true
    }
}
else
    draw_text_shadow(x,_i,"Test mode: " + string(global.testmode),c_white,c_black,1) 
   */

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
