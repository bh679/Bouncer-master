<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//instance_destroy()//only for html5

reset_var()
if instance_number(obj_new_level) = 2
    instance_destroy()
/*with(obj_solid)
    {instance_destroy()}*/
STARTSEED = random(500)
back = 0
i= 0
repeat(20)
{
    PreivousSeed[i] = random(500)
    i += 1
}
enterseed = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(vk_alt) and keyboard_check(vk_control) and keyboard_check(vk_backspace)
    game_end()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
reset_var()


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Remove deadballs</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with(obj_deadball)
{
    instance_destroy()
}

with(wall_par)
{
    instance_destroy()
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.generate</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inisialise</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//inisalise block constants
//independance
//BLOCKSIZE = 16
if enterseed = true
    back = 0


if back = 0
{
    i= 20
    repeat(20)
    {
        PreivousSeed[i] = PreivousSeed[i-1]
        i -= 1
    }
    PreivousSeed[0] = STARTSEED

    if enterseed = true
    {
        STARTSEED = real(get_integer("Enter Seed:",STARTSEED))
        enterseed = false
        random_set_seed(STARTSEED)
    }
    else
        STARTSEED = random_get_seed()
        
        
}
else
{
    random_set_seed(PreivousSeed[back-1])
    STARTSEED = random_get_seed()
}


TARGETNO = floor(random(20)+35)
WALLBLOCK = obj_dirt
STARTBLOCK = obj_dirt
LANDSCAPETYPE = 1

//Exit
ExitPos = floor(random(room_height/BLOCKSIZE+room_width/BLOCKSIZE-2))
ExitSize = floor(random(15)+3)

//ball position
BALLX = random(room_width/2-BLOCKSIZE*3) + BLOCKSIZE*3
BALLY = floor((random(room_height/2-BLOCKSIZE*2) + room_height/2 - BLOCKSIZE)/BLOCKSIZE)*BLOCKSIZE



//inisalise block position array
y = 0
repeat(room_height/BLOCKSIZE)
{
    x = 0
    repeat(room_width/BLOCKSIZE)
    {
        block[x,y] = -1//WALLBLOCK
        x += 1
    }
    y += 1
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>landscape type</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if LANDSCAPETYPE = 1
{
////////////////////
///////path/////////
/////////////////////
var i, Dir, ran1, turn, turns, LeftTurn, Direction1, Direction2;

//start
targetx[0] = BALLX/BLOCKSIZE
targety[0] = BALLY/BLOCKSIZE
i = 1
//1st step
targetSize[i] = 2 + floor(random(8))
ran1 = floor(random(targetSize[i-1] + targetSize[i]))
Dir = point_direction(0,0,10,-10)+random(45)-45/2
targetx[i] = targetx[i-1] + lengthdir_x(ran1,Dir)
targety[i] = targety[i-1] + lengthdir_y(ran1,Dir)

turn = 0
turns = 0
LeftTurn = false
do
{
    i+= 1
    targetSize[i] = 2 + floor(random(8))
    ran1 = floor(random(targetSize[i-1] + targetSize[i]))
    
    //direction
    if turns = 0
    {
        Dir = point_direction(targetx[i-2],targety[i-2],targetx[i-1],targety[i-1])+random(90)-45
        if floor(random(20)) = 0
        {
            turn = floor(random(8))+2
            turns = floor(random(8))+2
            if floor(random(2)) = 0
                LeftTurn = true
            else
                LeftTurn = false
        }   
    }
    else
    {
        turns -= 1
        Dir = point_direction(targetx[i-2],targety[i-2],targetx[i-1],targety[i-1])+180/turn + random(10)-5
        targetSize[i] = 2 + floor(random(3))
        ran1 = floor(random(targetSize[i-1] + targetSize[i]-1))+1
    }
    
    targetx[i] = targetx[i-1] + lengthdir_x(ran1,Dir)
    targety[i] = targety[i-1] + lengthdir_y(ran1,Dir)
    //fix this!
    
    if i &gt; 1
    {

            
        /*r0 = argument0//targetSize[i-1]
        r1 = argument1//targetSize[i]
        x0 = argument2//targetx[i-1]
        y0 = argument3//targety[i-1]
        x1 = argument4//targetx[i]
        y1 = argument5//targety[i]*.
        /* NoClumps = argument0//random(5)
        minangle = argument2// left right top bottom all
        maxangle = argument3
        BLOCKTYPE = argument1*/
        Direction1 = DirectionToIntersection(targetSize[i-2],targetSize[i-1],targetx[i-2],targety[i-2],targetx[i-1],targety[i-1])
        Direction2 = DirectionToIntersection(targetSize[i-1],targetSize[i],targetx[i-1],targety[i-1],targetx[i],targety[i])
        AddLiningAngle(2,obj_dirt,Direction1,Direction2,i)
    }
}    
until(targetx[i] &gt;= room_width/BLOCKSIZE or targety[i] &gt;= room_height/BLOCKSIZE or targetx[i] &lt;= 0 or targety[i] &lt;= 0)

TARGETNO = i
//old = targetSize[i]// ---debuggin

if targetx[i] &lt;= 0 
    targetSize[i] = max(-1*targetx[i]+4,targetSize[i]) 
if targety[i] &gt;= room_height/BLOCKSIZE
    targetSize[i] = max(targety[i]-room_height/BLOCKSIZE+4,targetSize[i]) 
if targetx[i] &gt;= room_width/BLOCKSIZE
    targetSize[i] = max(targetx[i]-room_width/BLOCKSIZE+4,targetSize[i]) 
if targety[i] &lt;= 0
    targetSize[i] = max(-1*targety[i]+4,targetSize[i]) 
//else
// show_message('Error generating level, 001')


///////////////////////////////////
///////////level type//////////////
///////////////////////////////////
switch(floor(random(3)))    
{
case 0:
    //Solid
    y = 0
    repeat(room_height/BLOCKSIZE)
    {
        x = 0
        repeat(room_width/BLOCKSIZE)
        {
            block[x,y] = WALLBLOCK
            x += 1
        }
        y += 1
    }
    
    //sand
    if (floor(random(3)) != 0 or TARGETNO &gt; 15) and SandLevel()//test for difficaulty here
        AddClumps(floor(random(5)+(10-TARGETNO)/2),obj_sand,1,10)
        
    //tramp
    if (floor(random(4)) != 0 or TARGETNO &gt; 15)and TrampLevel()//test for difficaulty here
    {
        if floor(random(2)) = 0 
            AddLining(floor(random(2)),obj_tramp,'all')
        
        if targetx[TARGETNO] &gt; (room_width/BLOCKSIZE)/2 or floor(random(4)) = 0 
            AddLining(floor(random(2)),obj_tramp,'top')
        
        AddLining(floor(random(4)),obj_tramp,'bottom')
        
        if targetx[TARGETNO] &gt; (room_width/BLOCKSIZE)/2 or floor(random(4)) = 0 
        AddLining(floor(random(2)),obj_tramp,'left')
        
        
        if targetx[TARGETNO] &lt; (room_width/BLOCKSIZE)/2 or floor(random(4)) = 0 
        AddLining(floor(random(2)),obj_tramp,'right')
    }
    //sand
    if (floor(random(3)) != 0 and TARGETNO &lt; 20)// and SandLevel()//test for difficaulty here
        AddClumps(floor(random(5)+(10-TARGETNO)/2),-1,1,5)
    
break;
case 1:
    //rows
    VertRows = ceil(random(10))
    HorzRows = ceil(random(10))
    
    AddVertRows(VertRows)
    AddHorzRows(HorzRows)
  
    //add solid clumps
    if floor(random(3)) = 0
        AddClumps(floor(random(5)),WALLBLOCK,1,10)
        
    //add solid clumps
    if floor(random(3)) = 0
        AddClumps(floor(random(3)),obj_sand)
        
        
break;
default:   
    //add solid clumps
    if floor(random(5)) != 0
        AddClumps(floor(random(7)),WALLBLOCK,1,10) 
    if floor(random(4)) != 0
        AddClumps(floor(random(7)),obj_sand,1,10)  
    if floor(random(1)) = 0 
        AddClumps(floor(random(2)),obj_tramp,1,4)
    if floor(random(1)) = 0 
        AddLining(floor(random(2)),obj_tramp,'all')
    if floor(random(1)) = 0 
        AddLining(floor(random(2)),obj_sand,'all') 
        

}

//start
    y = 0
    repeat(room_height/BLOCKSIZE)
    {
        x = 0
        repeat(room_width/BLOCKSIZE)
        {
            if point_distance(x,y,BALLX,BALLY) &lt; 4
                block[x,y] = -1
            x += 1
        }
        y += 1
    }

//cut path through blocks
i = 1
repeat(TARGETNO)
{
    y = 0
    repeat(room_height/BLOCKSIZE)
    {
        x = 0
        repeat(room_width/BLOCKSIZE)
        {
            if point_distance(x,y,targetx[i],targety[i]) &lt; targetSize[i]
                block[x,y] = -1
            x += 1
        }
        y += 1
    }
    i+= 1
}
 AddTramp(5,obj_tramp)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>walls and start</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//walls
y = 0
x = 0
i = 0
gap = 0

//down left
repeat(room_height/BLOCKSIZE-1)
{
    block[x,y] = GenExit()
    if block[x,y] = -1
        gap+= 1
    y+= 1
    i += 1
}
//bottom right
repeat(room_width/BLOCKSIZE-1)
{
    block[x,y] = GenExit()
    if block[x,y] = -1
        gap+= 1
    x+= 1
    i += 1
}
//up right
repeat(room_height/BLOCKSIZE-1)
{
    block[x,y] = GenExit()
    if block[x,y] = -1
        gap+= 1
    y-= 1
    i += 1
}
//top left
repeat(room_width/BLOCKSIZE-1)
{
    block[x,y] = GenExit()
    if block[x,y] = -1
        gap+= 1
    x-= 1
    i += 1
}

if gap &lt; 2
{

    y = 0
    repeat(room_height/BLOCKSIZE)
    {
        x = 0
        repeat(room_width/BLOCKSIZE)
        {
            if point_distance(x,y,targetx[TARGETNO],targety[TARGETNO]) &lt; targetSize[TARGETNO]
                block[x,y] = -1
            x += 1
        }
        y += 1
    }
    i+= 1 
}

i = 0
repeat(3)
{
    block[BALLX/BLOCKSIZE-2,BALLY/BLOCKSIZE-i] = -1
    block[BALLX/BLOCKSIZE-1,BALLY/BLOCKSIZE-i] = -1
    block[BALLX/BLOCKSIZE,BALLY/BLOCKSIZE-i] = -1
    block[BALLX/BLOCKSIZE+1,BALLY/BLOCKSIZE-i] = -1
    i += 1
}


block[BALLX/BLOCKSIZE-2,BALLY/BLOCKSIZE+1] = STARTBLOCK
block[BALLX/BLOCKSIZE,BALLY/BLOCKSIZE+1] = STARTBLOCK
block[BALLX/BLOCKSIZE-1,BALLY/BLOCKSIZE+1] = STARTBLOCK
block[BALLX/BLOCKSIZE+1,BALLY/BLOCKSIZE+1] = STARTBLOCK
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>create blocks</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y = 0
repeat(room_height/BLOCKSIZE)
{
    x = 0
    repeat(room_width/BLOCKSIZE)
    {
        if block[x,y] != -1
        {
            instance_create(x*BLOCKSIZE,y*BLOCKSIZE,block[x,y])
        }           
        x += 1
    }
    y += 1
}

instance_create(BALLX,BALLY,obj_ball)

global.generate = false

Levels.roomindex = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*y = 0
repeat(room_height/BLOCKSIZE)
{
    x = 0
    repeat(room_width/BLOCKSIZE)
    {
        if block[x,y] != -1
            draw_sprite(spr_dirt,0,x*BLOCKSIZE,y*BLOCKSIZE)//instance_create(x*BLOCKSIZE,y*BLOCKSIZE,block[x,y])
        x += 1
    }
    y += 1
}
*/

if keyboard_check(vk_control) or global.debuggin = true
{
    draw_sprite(spr_ball,0,BALLX,BALLY)

    draw_set_color(c_white)
    if LANDSCAPETYPE = 1
    {
        i = 0
        repeat(TARGETNO+1)
        {
            if i = TARGETNO
                draw_set_color(c_red)    
            //draw_sprite(spr_start,0,targetx[i]*BLOCKSIZE,targety[i]*BLOCKSIZE)
            draw_line(targetx[i]*BLOCKSIZE,targety[i]*BLOCKSIZE,targetx[max(0,i-1)]*BLOCKSIZE,targety[max(0,i-1)]*BLOCKSIZE)
            draw_circle(targetx[i]*BLOCKSIZE,targety[i]*BLOCKSIZE,targetSize[i]*BLOCKSIZE,true)
            draw_text(targetx[i]*BLOCKSIZE,targety[i]*BLOCKSIZE,string(targetSize[i]))
            i += 1
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*with(obj_ball)
{
    instance_destroy()
}

instance_create(x,y,obj_ctrl)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.generate = true
if back &lt; 20
    back += 1
room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
