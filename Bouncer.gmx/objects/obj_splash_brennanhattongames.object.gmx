<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 0
black = 0


Time = 0
blocksize = 24
yblocks = floor(room_height/blocksize)+1
xblocks = floor(room_width/blocksize)+1
xrowsize = 0
yrowsize = 0
for(y = 0; y &lt; yblocks; y += 1)
{
    for(x = 0; x &lt; xblocks; x += 1)
    {
        box[x,y] = c_blue//make_color(0,0,0)
        boxRand[x,y] = random(255)
        boxLand[x,y] = 0
        boxactive[x,y] =  true//make_color(random(255),random(255),random(255))
    }
}
redraw_background = true

rows = floor(max(room_height,room_width)/blocksize)//floor(sprite_get_height(spr_MASH)/blocksize) + 3
maxrowwidth = floor(room_width/blocksize)
for(y = 0; y &lt; rows; y += 1)
    rowsize[y] = -y 

rowchange = 0

mouseRadius = 10

action = 0

earthsize = 10
moonsize = 3

rocketx = floor(random(2))*xblocks
rockety = floor(random(2))*yblocks
if floor(random(2))
    rocketx = floor(random(xblocks))
else
    rockety = floor(random(yblocks))
boom = false
rocketspeed = 1
rockethittime = 0
rockethit = floor(random(earthsize - rocketspeed)) + rocketspeed
explosionTime = 30*5
timecheck = 0

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*char_xsize = 3
char_bsize = 5

char_B[0,0] = true
char_B[1,0] = true 
char_B[2,0] =  true
char_B[3,0] =  true
char_B[4,0] =  true

char_B[0,1] =  true
char_B[1,1] =  false
char_B[2,1] =  true
char_B[3,1] =  false
char_B[4,1] =  true

char_B[0,2] =  true
char_B[1,2] =  true
char_B[2,2] =  true
char_B[3,2] =  true
char_B[4,2] =  true

char_R[0,0] = true
char_R[1,0] = true 
char_R[2,0] =  true
char_R[3,0] =  true
char_R[4,0] =  true

char_R[0,1] =  true
char_R[1,1] =  false
char_R[2,1] =  true
char_R[3,1] =  false
char_R[4,1] =  true

char_R[0,2] =  true
char_R[1,2] =  true
char_R[2,2] =  true
char_R[3,2] =  true
char_R[4,2] =  true/*
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>526</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_font</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>12</kind>
            <font>font_splashbhg</font>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Time += 1
landcolor = c_green

//redraw_background
if redraw_background = true
{
    for(y = 0; y &lt; yblocks; y += 1)
    {
        for(x = 0; x &lt; xblocks; x += 1)
        {   
            distanceToCenter = point_distance(xblocks/2,yblocks/2,x,y)
               
            //draw omnius blue
            blue = distanceToCenter/maxrowwidth * 25//min(max(0,(1 - y / yblocks)*105 + 50*(sin(degtorad(Time))/2 + 1/2)),255)
            box[x,y] = merge_color(box[x,y],make_color_rgb(0,0,blue),0.1)// + 0.01*boxRand[x,y]/255)
            
            //draw stars
            if floor(boxRand[x,y]) = 1
                box[x,y] = merge_color(blue,c_white,0.5 + (0.5 - abs(sin(degtorad(Time + boxRand[(x+1) mod xblocks,(y+1) mod yblocks])))/2))
         
             distanceToSun = min(max(point_distance(x,y,Time/2 mod xblocks*2 - xblocks/2 + 1,Time/10 mod yblocks*2 - yblocks/2)*4/xblocks*100,0),255)
        
             light = make_color(255 - distanceToSun, 255 - distanceToSun, 255 - distanceToSun)
             
            //draw earth
            if distanceToCenter &lt; earthsize
            { 
                 close = 100
                 nearland = 0
                 for(i = 1; i &lt; 3; i += 1)
                 {
                     if boxLand[max(x-1,0),y] &gt;= i
                        nearland += 1 
                     if boxLand[x,max(y-1,0)] &gt;= i
                        nearland += 1
                     if boxLand[max(x-1,0),max(y-1,0)] &gt;= i
                        nearland += 1
                     if boxLand[min(x+1,xblocks-1),y] &gt;= i
                        nearland += 1
                     if boxLand[x,min(y+1,yblocks-1)] &gt;= i
                        nearland += 1
                     if boxLand[min(x+1,xblocks-1),min(y+1,yblocks-1)] &gt;= i
                        nearland += 1
                     if boxLand[min(x+1,xblocks-1),max(y-1,0)] &gt;= i
                        nearland += 1
                     if boxLand[max(x-1,0),min(y+1,yblocks-1)] &gt;= i
                        nearland += 1
                 }
                 //land
                 //boxLand[x,y] = false
                 if /*boxRand[x,y] &lt; 20 or*/ boxRand[x,y] &lt;= min(nearland*50/* + Time/15*/,200)
                 {
                    boxLand[x,y] = max(1,nearland/5)
                 }   
                 if boxLand[x,y] = 0
                    blockcolour = merge_color(c_aqua,c_blue,distanceToCenter/earthsize*0.3)
                 else if boxLand[x,y] = 1
                    blockcolour = landcolor
                 else if boxLand[x,y] = 2 
                    blockcolour = c_dkgreen
                 else if boxLand[x,y] &gt;= 4
                    blockcolour = c_orange
                 else
                    blockcolour = c_brown
                 box[x,y] = merge_color(blockcolour, light, 0.5)
             }
             
             //rocketship
             if rocketspeed &gt; 0
             {
                 if x = floor(rocketx) and y = floor(rockety)
                    box[x,y] = c_red
             }
             
             //the moon
             moonx = xblocks/2 + sin(degtorad(Time*2))*earthsize*1.7
             moony = yblocks/2 + sin(degtorad(Time*1.9))*earthsize*1
             if point_distance(x,y,moonx,moony) &lt; moonsize and ((Time*2 mod 360 &lt; 90 or Time*2 mod 360 &gt; 360-90)or distanceToCenter &gt; earthsize)
             {
                 box[x,y] = merge_color(c_gray,c_black,(x-moonx + y-moony)/10)
                 box[x,y] = merge_color(box[x,y], light, 0.5)
             }
             
             //explosion
             if Time &gt; explosionTime and (point_distance(rocketx,rockety,xblocks/2,yblocks/2) &lt; rockethit + rocketspeed or boom = true)
             {
                if boom = false
                {
                    explosionTime = Time
                }
                boom = true
                rocketspeed = 0
                timecheck = Time - explosionTime + boxRand[x,y]/100
                if distanceToCenter &lt; timecheck
                {
                    ran1 = random(15) + random(50)*(floor(random(20)) = 1)
                    red = make_color(random(255),random(55),random(55))
                    black = make_color(random(15),random(15),random(15))
                    box[x,y] = merge_color(red,black,min(1,max((timecheck - distanceToCenter)/distanceToCenter,0)))
                }
               
             }
        }
    }
}

if timecheck &gt; 30*4
    room = room_next(room)
 
 
if rocketx &gt;= 0
{
    rocketdirection = point_direction(rocketx,rockety,xblocks/2,yblocks/2)
    rocketx += lengthdir_x(rocketspeed,rocketdirection)
    rockety += lengthdir_y(rocketspeed,rocketdirection)
    if point_distance(rocketx,rockety,xblocks/2,yblocks/2) &lt; rockethit
    {
      rockethit = floor(random(earthsize - rocketspeed)) + rocketspeed
      repeat(6)
        boxLand[rocketx+floor(random(2))-floor(random(2)),rockety+floor(random(2))-floor(random(2))] = floor(random(4))
      boxLand[rocketx,rockety] = 5
      rocketx = floor(random(2))*xblocks
      rockety = floor(random(2))*yblocks
        if floor(random(2))
            rocketx = floor(random(xblocks))
        else
            rockety = floor(random(yblocks))
      //rocketspeed = 0
    }
}


switch(action)
{
    case 0:
        
    break;
}


/*for(y = 0; y &lt; yblocks; y += 1)
{
    for(x = 0; x &lt; xblocks; x += 1)
    {
        //static
        if boxactive[x,y] = true and black &gt;= 1 
        and x &lt;= rowsize[y]
        {
            if x*blocksize+blocksize &gt;= floor((room_width/2-sprite_get_width(spr_MASH)/2)/blocksize)*blocksize and x*blocksize-blocksize &lt; floor((room_width/2+sprite_get_width(spr_MASH)/2)/64)*64
            and y*blocksize+blocksize &gt;= floor((room_height/2-sprite_get_height(spr_MASH)/2)/64)*64 and y*blocksize-blocksize &lt; floor((room_height/2+sprite_get_height(spr_MASH)/2)/64)*64
                boxactive[x,y] = false
             
                //gray scale   
            if xblocks-1 &lt;= rowsize[yblocks-1] and Time &gt; 30*9
                box[x,y] = merge_color(box[x,y],make_color_hsv(color_get_hue(box[x,y]),0,color_get_value(box[x,y])),0.05)
        }
        //
        else if boxactive[x,y] = true and black &lt; 1 
        and x &lt;= rowsize[y]
        {       
            darkness = (rowsize[y] - x)/maxrowwidth
            box[x,y] = merge_color(box[x,y],make_color(random(255)*darkness, random(255)*darkness, random(255)*darkness), 0.8)//box[x,y] = merge_color(box[x,y],make_color(random(255), random(255), random(255)), 0.8)
        }
        else if black &gt;= 1 
          box[x,y] = merge_color(box[x,y],make_color(random(255), random(255), random(255)), 0.8)
        
        mousratio = point_distance(x*blocksize,y*blocksize,(1-mouse_y/room_height) * room_width,room_height * (1-mouse_x/room_width)) / (mouseRadius*blocksize)
        repeat(2)
        {  
            if mousratio &lt; 1 and random(1-mousratio) &gt; 0.5
            {
                if black &gt;= 1 or x &lt;= rowsize[y]
                    box[x,y] = merge_color(box[x,y],make_color(random(255), random(255), random(255)),1);
            }
            else if black &lt; 1 and x &gt; rowsize[y]
            {
                if mousratio &lt; 5 and random(1-mousratio) &gt; 0.5
                    box[x,y] = merge_color(box[x,y],make_color(0, 0, 0),0.25);
                else if random(2) &lt;= 1
                {
                    tmpvar = random(50)
                    box[x,y] = merge_color(box[x,y],make_color(tmpvar, tmpvar, tmpvar),0.025);
                }
            }
            mousratio = point_distance(x*blocksize,y*blocksize,mouse_y/room_height * room_width,room_height * mouse_x/room_width) / (mouseRadius*blocksize)
        }
    }
}*/

/*if !(rowsize[rows - 1] &gt;= maxrowwidth-8)// or boxactive[0,0] = false
{
    if Time mod 2 = 1
        audio_play_sound(snd_pageturn,1,false)
}

if image_alpha &lt;= 0 and Time &gt; 30*2
{
    for(y = 0; y &lt; rows; y += 1)
        rowsize[y] += 0.75
}

if Time &gt; 30*8 and rowsize[rows - 1] &gt;= maxrowwidth and image_alpha &gt;= 1
{
    room = room_next(room)
}

if rowsize[rows - 1] &gt;= maxrowwidth and Time &gt; 30*10
    image_alpha += 0.005
else if black &lt; 1 and Time &gt; 30*2
{
    black = min(black+0.01,1)//image_alpha = max(image_alpha-0.01,0)
    if black = 1
    {
        for(y = 0; y &lt; rows; y += 1)
            rowsize[y] = -y
    }
}*/
    
//else
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black)
draw_set_valign(fa_top)
draw_set_halign(fa_right)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_alpha(1)
//draw_sprite_ext(sprite1,0,floor((room_width/2-sprite_get_width(spr_MASH)/2)/64)*64,floor((room_height/2-sprite_get_height(spr_MASH)/2)/64)*64,1,1,0,noone,1)
/*draw_set_valign(fa_bottom)
draw_set_halign(fa_middle)
draw_text(room_width/2,room_height/2,"MASH")
*/
for(y = 0; y &lt; yblocks; y += 1)
{
    for(x = 0; x &lt; xblocks; x += 1)
    {
        if boxactive[x,y] = true
        {
            draw_set_color(box[x,y])
            draw_rectangle(x*blocksize,y*blocksize,x*blocksize+blocksize,y*blocksize+blocksize,false)
        }
    }
}

draw_set_color(c_white)
draw_text(room_width/2,room_height-room_height/4,"BrennanHattonGames.com")

draw_set_alpha(image_alpha)
draw_set_color(c_black)
draw_rectangle(0,0,room_width,room_height,false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
